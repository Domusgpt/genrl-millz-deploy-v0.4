const form=document.getElementById('uploadForm'),fileInput=document.getElementById('magazineDataFile'),statusMessage=document.getElementById('statusMessage'),submitButton=form.querySelector('button[type="submit"]');form.addEventListener('submit',async e=>{e.preventDefault();if(!fileInput.files||0===fileInput.files.length)return void displayMessage('> ERROR :: No file selected for transmission.','error');const t=fileInput.files[0];if((!t.type||'application/json'!==t.type)&&!t.name.toLowerCase().endsWith('.json'))return fileInput.value='',void displayMessage(`> ERROR :: Invalid file type detected (${t.type||"unknown"}). Must be .json`,'error');t.type||console.warn("File type missing, proceeding based on .json extension.");const n=new FormData;n.append('magazineDataFile',t),displayMessage('> PROCESSING :: Transmitting data to Central Command...',''),submitButton.disabled=!0;try{const e=await fetch('/upload',{method:'POST',body:n});let t={success:!1,message:"Unknown server response."};try{t=await e.json()}catch(o){t.message=`Server response error (Status: ${e.status} ${e.statusText||""}). Check server logs.`,console.error("Failed to parse server JSON response:",o)}e.ok&&t.success?(displayMessage(`> SUCCESS :: ${t.message}`,'success'),fileInput.value=''):(displayMessage(`> ERROR :: ${t.message||`Upload protocol failed (Status: ${e.status}). Verify data integrity.`}`,'error'),console.error("Upload failed:",t))}catch(e){console.error('Network/Fetch Error during upload:',e),displayMessage('> ERROR :: Network uplink failed. Check connection to server.','error')}finally{submitButton.disabled=!1}});function displayMessage(e,t){statusMessage.textContent=e,statusMessage.className=t}
